<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="HttpCaching.Web.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_framework/blazor.web.js"></script>
    <script>
        window.fetchWeather = async ({endpoint, config}) => {
            const requestTemplate = {
                method: 'GET',
                headers: {}
            };
            const request = config
                ? config({requestTemplate})
                : requestTemplate;
            const response = await fetch(`http://localhost:5531/weatherforecast-${endpoint}`, request);
            const content = response.status === 200 ? (await response.json()) : (await response.text());
            const res = { status: response.status, headers: Array.from(response.headers.entries()), content: content };
            console.log(res);
            return res;
        };
        
        window.fetchWeatherNoCache = async () => {
            return await window.fetchWeather({endpoint: "nocache"});
        };

        window.fetchWeatherCacheControl = async ({cache}) => {
            return await window.fetchWeather({endpoint: "cachecontrol", config: ({requestTemplate}) => {
              return {...requestTemplate, ...{headers:{...requestTemplate.headers, ...{ 'Cache-Control': cache || "default" }}} }
            }});
        };

        window.fetchWeatherLastModified = async ({lastModified}) => {
            return await window.fetchWeather({endpoint: "lastmodified", config: ({requestTemplate}) => {
              return {...requestTemplate, ...{headers:{...requestTemplate.headers, ...{ 'If-Modified-Since': lastModified }}} }
            }});
        };

        window.fetchWeatherEtag = async ({eTag}) => {
            return await window.fetchWeather({endpoint: "etag", config: ({requestTemplate}) => {
              return {...requestTemplate, ...{headers:{...requestTemplate.headers, ...{ 'If-None-Match': eTag }}} }
            }});
        };

        window.fetchWeatherCacheControlPlusEtag = async ({cache}) => {
            return await window.fetchWeather({endpoint: "ccplusetag", config: ({requestTemplate}) => {
              return {...requestTemplate, ...{headers:{...requestTemplate.headers, ...{ 'Cache-Control': cache || "default" }}} }
            }});
        };
    </script>
</body>

</html>
